env:
  - GO111MODULE=on
  - CGO_ENABLED=0
  - RELEASE_BUILDS=dist/aws-dc-exporter_darwin_amd64/aws-dc-exporter dist/aws-dc-exporter_linux_amd64/aws-dc-exporter dist/aws-dc-exporter_windows_amd64//aws-dc-exporter.exe

builds:
  - binary: aws-dc-exporter
    goos:
      - windows
      - darwin
      - linux
    goarch:
      - amd64
    ldflags:
      - -s -w -X "main.buildVersion={{ .Tag }} ({{ .ShortCommit }} {{ .Date }})"

archives:
  - format: tar.gz
    files:
      - config.sample.toml
      - README.md
      - LICENSE
dockers:
  # You can have multiple Docker images.
  -
    # GOOS of the built binary that should be used.
    goos: linux
    # GOARCH of the built binary that should be used.
    goarch: amd64
    # GOARM of the built binary that should be used.
    goarm: ''
    # Name templates of the built binaries that should be used.
    binaries:
    - aws-dc-exporter
    # Templates of the Docker image names.
    image_templates:
    - "mrkaran/aws-dc-exporter:latest"
    - "mrkaran/aws-dc-exporter:{{ .Tag }}"
    # Skips the docker push. Could be useful if you also do draft releases.
    # If set to auto, the release will not be pushed to the docker repository
    # in case there is an indicator for prerelease in the tag e.g. v1.0.0-rc1
    # Defaults to false.
    skip_push: false
    # Path to the Dockerfile (from the project root).
    dockerfile: Dockerfile
    # If your Dockerfile copies files other than the binary itself,
    # you should list them here as well.
    # Note that goreleaser will create the same structure inside the temporary
    # folder, so if you add `foo/bar.json` here, on your Dockerfile you can
    # `COPY foo/bar.json /whatever.json`.
    # Also note that the paths here are relative to the folder in which
    # goreleaser is being run.
    # This field does not support wildcards, you can add an entire folder here
    # and use wildcards when you `COPY`/`ADD` in your Dockerfile.
    extra_files:
    - config.sample.toml